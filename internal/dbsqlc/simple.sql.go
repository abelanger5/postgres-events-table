// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: simple.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bulkInsertSimple = `-- name: BulkInsertSimple :many
WITH input_data AS (
    SELECT
        UNNEST($1::TIMESTAMPTZ[]) AS created_at,
        UNNEST($2::UUID[]) AS tenant_id,
        UNNEST($3::UUID[]) AS resource_id,
        UNNEST($4::JSONB[]) AS data
)
INSERT INTO simple_events (created_at, tenant_id, resource_id, data)
SELECT
    input_data.created_at,
    input_data.tenant_id,
    input_data.resource_id,
    input_data.data
FROM input_data
RETURNING id, created_at, tenant_id, resource_id, data
`

type BulkInsertSimpleParams struct {
	CreatedAts  []pgtype.Timestamptz `json:"created_ats"`
	TenantIds   []pgtype.UUID        `json:"tenant_ids"`
	ResourceIds []pgtype.UUID        `json:"resource_ids"`
	Datas       [][]byte             `json:"datas"`
}

func (q *Queries) BulkInsertSimple(ctx context.Context, db DBTX, arg BulkInsertSimpleParams) ([]*SimpleEvent, error) {
	rows, err := db.Query(ctx, bulkInsertSimple,
		arg.CreatedAts,
		arg.TenantIds,
		arg.ResourceIds,
		arg.Datas,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SimpleEvent
	for rows.Next() {
		var i SimpleEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TenantID,
			&i.ResourceID,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, created_at, tenant_id, resource_id, data
FROM simple_events
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, db DBTX, id int64) (*SimpleEvent, error) {
	row := db.QueryRow(ctx, getEventByID, id)
	var i SimpleEvent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TenantID,
		&i.ResourceID,
		&i.Data,
	)
	return &i, err
}

const insertSimple = `-- name: InsertSimple :one
INSERT INTO simple_events (created_at, tenant_id, resource_id, data)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, tenant_id, resource_id, data
`

type InsertSimpleParams struct {
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	TenantID   pgtype.UUID        `json:"tenant_id"`
	ResourceID pgtype.UUID        `json:"resource_id"`
	Data       []byte             `json:"data"`
}

func (q *Queries) InsertSimple(ctx context.Context, db DBTX, arg InsertSimpleParams) (*SimpleEvent, error) {
	row := db.QueryRow(ctx, insertSimple,
		arg.CreatedAt,
		arg.TenantID,
		arg.ResourceID,
		arg.Data,
	)
	var i SimpleEvent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TenantID,
		&i.ResourceID,
		&i.Data,
	)
	return &i, err
}

const listEventsByResourceID = `-- name: ListEventsByResourceID :many
SELECT id, created_at, tenant_id, resource_id, data 
FROM simple_events 
WHERE resource_id = $1 AND tenant_id = $2 
ORDER BY id ASC
`

type ListEventsByResourceIDParams struct {
	ResourceID pgtype.UUID `json:"resource_id"`
	TenantID   pgtype.UUID `json:"tenant_id"`
}

func (q *Queries) ListEventsByResourceID(ctx context.Context, db DBTX, arg ListEventsByResourceIDParams) ([]*SimpleEvent, error) {
	rows, err := db.Query(ctx, listEventsByResourceID, arg.ResourceID, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SimpleEvent
	for rows.Next() {
		var i SimpleEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TenantID,
			&i.ResourceID,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
