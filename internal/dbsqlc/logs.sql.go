// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: logs.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BulkInsertLogsParams struct {
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	TenantID   pgtype.UUID        `json:"tenant_id"`
	ResourceID pgtype.UUID        `json:"resource_id"`
	Log        pgtype.Text        `json:"log"`
}

const listLogs = `-- name: ListLogs :many
SELECT created_at, tenant_id, resource_id, log 
FROM logs 
WHERE created_at >= $1 AND created_at <= $2 AND tenant_id = $3 AND resource_id = $4
ORDER BY created_at DESC
`

type ListLogsParams struct {
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
	TenantID    pgtype.UUID        `json:"tenant_id"`
	ResourceID  pgtype.UUID        `json:"resource_id"`
}

func (q *Queries) ListLogs(ctx context.Context, db DBTX, arg ListLogsParams) ([]*Log, error) {
	rows, err := db.Query(ctx, listLogs,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.TenantID,
		arg.ResourceID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.CreatedAt,
			&i.TenantID,
			&i.ResourceID,
			&i.Log,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
