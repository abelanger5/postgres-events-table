// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package dbsqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type MetricEventType string

const (
	MetricEventTypeSUCCEEDED MetricEventType = "SUCCEEDED"
	MetricEventTypeFAILED    MetricEventType = "FAILED"
)

func (e *MetricEventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MetricEventType(s)
	case string:
		*e = MetricEventType(s)
	default:
		return fmt.Errorf("unsupported scan type for MetricEventType: %T", src)
	}
	return nil
}

type NullMetricEventType struct {
	MetricEventType MetricEventType `json:"metric_event_type"`
	Valid           bool            `json:"valid"` // Valid is true if MetricEventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMetricEventType) Scan(value interface{}) error {
	if value == nil {
		ns.MetricEventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MetricEventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMetricEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MetricEventType), nil
}

type Log struct {
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	TenantID   pgtype.UUID        `json:"tenant_id"`
	ResourceID pgtype.UUID        `json:"resource_id"`
	Log        pgtype.Text        `json:"log"`
}

type MetricEvent struct {
	ID         int64              `json:"id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	TenantID   pgtype.UUID        `json:"tenant_id"`
	ResourceID pgtype.UUID        `json:"resource_id"`
	EventType  MetricEventType    `json:"event_type"`
	Data       []byte             `json:"data"`
}

type MetricEventsSummary struct {
	Minute         interface{} `json:"minute"`
	TenantID       pgtype.UUID `json:"tenant_id"`
	SucceededCount int64       `json:"succeeded_count"`
	FailedCount    int64       `json:"failed_count"`
}

type SimpleEvent struct {
	ID         int64              `json:"id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	TenantID   pgtype.UUID        `json:"tenant_id"`
	ResourceID pgtype.UUID        `json:"resource_id"`
	Data       []byte             `json:"data"`
}
